import tkinter as tk
from tkinter import ttk, messagebox
import threading
import wave
import io
from gemini_tts import GeminiTTS
from audio_router import AudioRouter, find_virtual_cable_device

class AIAudioGUI:
    """GUI application for AI-powered audio transmission."""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("AI Audio Transmitter")
        self.root.geometry("500x400")
        self.root.resizable(True, True)
        
        # Initialize components
        self.tts = GeminiTTS()
        self.audio_router = None
        self.is_transmitting = False
        
        # Message template
        self.message_template = """This message is for {full_name}, this is Jessica with COUNTY Process Serving Division.
Your Case Number is {case_number}. Disclaimer: This message is generated by an AI system.
"""
        
        # Setup GUI
        self._setup_gui()
        self._setup_audio_router()
    
    def _setup_gui(self):
        """Creates the GUI elements."""
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        
        # Main frame
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # Title
        title_label = ttk.Label(main_frame, text="AI Audio Transmitter", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=10)
        
        # Full Name input
        ttk.Label(main_frame, text="Full Name:").grid(row=1, column=0, 
                                                      sticky=tk.W, pady=5)
        self.name_var = tk.StringVar()
        self.name_entry = ttk.Entry(main_frame, textvariable=self.name_var, 
                                   width=40)
        self.name_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=5)
        
        # Case Number input
        ttk.Label(main_frame, text="Case Number:").grid(row=2, column=0, 
                                                        sticky=tk.W, pady=5)
        self.case_var = tk.StringVar()
        self.case_entry = ttk.Entry(main_frame, textvariable=self.case_var, 
                                   width=40)
        self.case_entry.grid(row=2, column=1, sticky=(tk.W, tk.E), pady=5)
        
        # Audio Device selection
        ttk.Label(main_frame, text="Audio Device:").grid(row=3, column=0, 
                                                         sticky=tk.W, pady=5)
        self.device_var = tk.StringVar()
        self.device_combo = ttk.Combobox(main_frame, textvariable=self.device_var,
                                        state="readonly", width=37)
        self.device_combo.grid(row=3, column=1, sticky=(tk.W, tk.E), pady=5)
        
        # Buttons frame
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=4, column=0, columnspan=2, pady=20)
        
        self.generate_button = ttk.Button(button_frame, text="Generate and Send",
                                         command=self._on_generate_send)
        self.generate_button.grid(row=0, column=0, padx=5)
        
        self.stop_button = ttk.Button(button_frame, text="Stop",
                                     command=self._on_stop,
                                     state=tk.DISABLED)
        self.stop_button.grid(row=0, column=1, padx=5)
        
        # Status frame
        status_frame = ttk.LabelFrame(main_frame, text="Status", padding="5")
        status_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E), 
                         pady=10)
        status_frame.columnconfigure(0, weight=1)
        
        self.status_label = ttk.Label(status_frame, text="Ready", 
                                     foreground="green")
        self.status_label.grid(row=0, column=0, sticky=tk.W)
        
        # Progress bar
        self.progress = ttk.Progressbar(status_frame, mode='indeterminate')
        self.progress.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=5)
        
        # Preview frame
        preview_frame = ttk.LabelFrame(main_frame, text="Message Preview", 
                                      padding="5")
        preview_frame.grid(row=6, column=0, columnspan=2, 
                          sticky=(tk.W, tk.E, tk.N, tk.S), pady=10)
        preview_frame.columnconfigure(0, weight=1)
        preview_frame.rowconfigure(0, weight=1)
        
        # Text preview
        self.preview_text = tk.Text(preview_frame, height=8, wrap=tk.WORD,
                                   font=('Arial', 9))
        self.preview_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Scrollbar for preview
        scrollbar = ttk.Scrollbar(preview_frame, orient="vertical",
                                 command=self.preview_text.yview)
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.preview_text.configure(yscrollcommand=scrollbar.set)
        
        # Bind events
        self.name_var.trace('w', self._update_preview)
        self.case_var.trace('w', self._update_preview)
        
        # Configure row weights for resizing
        main_frame.rowconfigure(6, weight=1)
    
    def _setup_audio_router(self):
        """Initializes the audio router with available devices."""
        # Find virtual cable device
        virtual_device = find_virtual_cable_device()
        
        if virtual_device:
            self.device_var.set(virtual_device)
            self.audio_router = AudioRouter(virtual_device)
            self.audio_router.start()
            self._update_status("Audio router initialized", "green")
        else:
            self._update_status("No virtual audio device found!", "red")
            messagebox.showwarning(
                "No Virtual Audio Device",
                "No virtual audio cable device was found.\n\n"
                "Please install VB-CABLE (Windows), BlackHole (macOS), "
                "or configure PulseAudio (Linux)."
            )
        
        # Populate device list
        self._populate_audio_devices()
    
    def _populate_audio_devices(self):
        """Populates the audio device dropdown."""
        import pyaudio
        p = pyaudio.PyAudio()
        
        devices = []
        for i in range(p.get_device_count()):
            info = p.get_device_info_by_index(i)
            if info['maxOutputChannels'] > 0:
                devices.append(info['name'])
        
        p.terminate()
        
        self.device_combo['values'] = devices
    
    def _update_preview(self, *args):
        """Updates the message preview."""
        name = self.name_var.get() or "[Full Name]"
        case = self.case_var.get() or "[Case Number]"
        
        message = self.message_template.format(
            full_name=name.upper(),
            case_number=case
        )
        
        self.preview_text.delete(1.0, tk.END)
        self.preview_text.insert(1.0, message)
    
    def _update_status(self, message: str, color: str = "black"):
        """Updates the status label."""
        self.status_label.config(text=message, foreground=color)
    
    def _on_generate_send(self):
        """Handles the Generate and Send button click."""
        # Validate inputs
        if not self.name_var.get():
            messagebox.showerror("Error", "Please enter a full name.")
            return
        
        if not self.case_var.get():
            messagebox.showerror("Error", "Please enter a case number.")
            return
        
        if not self.audio_router:
            messagebox.showerror("Error", "Audio router not initialized.")
            return
        
        # Disable button and start progress
        self.generate_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.progress.start()
        
        # Start generation in separate thread
        self.is_transmitting = True
        thread = threading.Thread(target=self._generate_and_send)
        thread.start()
    
    def _generate_and_send(self):
        """Generates and sends the audio (runs in separate thread)."""
        try:
            self._update_status("Generating audio...", "blue")
            
            # Format the message
            message = self.message_template.format(
                full_name=self.name_var.get().upper(),
                case_number=self._format_case_number(self.case_var.get())
            )
            
            # Generate audio
            audio_data = self.tts.generate_speech(message)
            
            if not self.is_transmitting:
                return
            
            self._update_status("Transmitting audio...", "orange")
            
            # Send audio through router
            # Split audio into chunks for real-time playback
            chunk_size = 4096
            audio_stream = io.BytesIO(audio_data)
            
            # Skip WAV header if present
            if audio_data[:4] == b"RIFF":
                audio_stream.seek(44)  # Standard WAV header size
            
            while self.is_transmitting:
                chunk = audio_stream.read(chunk_size)
                if not chunk:
                    break
                
                self.audio_router.send_audio(chunk)
            
            self._update_status("Transmission complete", "green")
            
        except Exception as e:
            self._update_status(f"Error: {str(e)}", "red")
            messagebox.showerror("Error", f"Failed to generate/send audio:\n{str(e)}")
        
        finally:
            # Re-enable button and stop progress
            self.root.after(0, self._reset_ui)
    
    def _format_case_number(self, case_number: str) -> str:
        """Formats case number for speech (e.g., '582193' → '58...21...93')."""
        # Remove any non-numeric characters
        digits = ''.join(filter(str.isdigit, case_number))
        
        # Group digits for clearer speech
        if len(digits) >= 6:
            return f"{digits[:2]}...{digits[2:4]}...{digits[4:6]}"
        else:
            return case_number
    
    def _on_stop(self):
        """Handles the Stop button click."""
        self.is_transmitting = False
        if self.audio_router:
            self.audio_router.clear_queue()
        self._update_status("Stopped", "red")
    
    def _reset_ui(self):
        """Resets UI elements after operation."""
        self.generate_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.progress.stop()
        self.is_transmitting = False
    
    def run(self):
        """Starts the GUI application."""
        # Initial preview update
        self._update_preview()
        
        # Start the main loop
        self.root.mainloop()
        
        # Cleanup
        if self.audio_router:
            self.audio_router.stop()

def main():
    """Main entry point."""
    app = AIAudioGUI()
    app.run()

if __name__ == "__main__":
    main()